#! /usr/bin/env perl
=head1 NAME

FvwmLayout - Fvwm module for tiling windows

=head1 SYNOPSIS

FvwmLayout 

=head1 DESCRIPTION

This Fvwm module tiles windows in different ways; each "way" is called a layout.
Layouts are applied on a per-desktop basis.

=head2 Layouts

To set a layout you must send a message to the module; this is most easily done
by setting a hotkey command for it.

    Key f		A	CM	FvwmLayout --action Full

This will set the layout for the current desktop to "Full" when Alt-Ctrl-f is hit.

=head3 Layout Types

=over

=item Columns

    Columns I<cols>

Windows are arranged in I<cols> columns.

    Columns I<cols>,I<proportions>

If a I<proportions> argument is given, this defines the proportions of the columns.
For example, "Columns 2,60:40" will give the first column 60% of the space, and the
second column 40% of the space.

=item Full

All windows are fullscreen.

=item Grid

    Grid I<grids>,I<cols>

Windows are arranged in a grid of I<grids> squares, with I<cols> columns.
Thus to get a 2x2 grid, the command is "Grid 4,2".

=item Rows

    Rows I<rows>

Windows are arranged in I<rows> rows.

    Rows I<rows>,I<proportions>

If a I<proportions> argument is given, this defines the proportions of the rows.
For example, "Rows 2,60:40" will give the first row 60% of the space, and the
second row 40% of the space.

=item Tall

    Tall I<groups>

Windows are arranged such that the first window is in one column, and the rest of the windows
are in (I<groups> - 1) rows in the second column.

    Tall I<groups>,Right

If a second argument "Right" is given ("Tall 3,Right" for example) then the arrangement is
a mirror-image, with the single-window column being on the right instead of the left.

=item Wide

    Wide I<groups>

Windows are arranged such that the first window is in one row, and the rest of the windows
are in (I<groups> - 1) columns in the second row.

    Wide I<groups>,Bottom

If a second argument "Bottom" is given ("Wide 3,Bottom" for example) then the arrangement is
a mirror-image, with the single-window row being on the bottom instead of the top.

=back

=head1 EXAMPLES

=head2 Example Config

    # =================================================================
    # FvwmLayout
    # =================================================================

    # Hotkeys
    Key n		A	3	FvwmLayout --action "None"
    Key f		A	3	FvwmLayout --action Full
    Key t		A	3	FvwmLayout --action Tall 3
    Key t		A	3S	FvwmLayout --action Tall 3,Right
    Key c		A	3	FvwmLayout --action Columns 2
    Key c		A	3S	FvwmLayout --action Columns 3,18:64:18
    Key r		A	3	FvwmLayout --action Rows 2
    Key r		A	3S	FvwmLayout --action Rows 2,66
    Key w		A	3	FvwmLayout --action Wide 3
    Key w		A	3S	FvwmLayout --action Wide 3,Bottom
    Key g		A	3	FvwmLayout --action Grid 4,2
    Key g		A	3S	FvwmLayout --action Grid 4,2,60,50

=head1 REQUIRES

    FVWM::Module
    Class::Base
    Module::Pluggable

=head1 INSTALLATION

=head2 Global

    perl Build.PL
    ./Build
    ./Build test
    sudo ./Build install

=head2 Personal

Since this module is only used by Fvwm, it makes equal sense to install it in your own .fvwm directory.

    mkdir $HOME/.fvwm/modules
    cp scripts/FvwmLayout $HOME/.fvwm/modules
    mkdir $HOME/.fvwm/perllib
    cp -a lib/FvwmLayout $HOME/.fvwm/perllib

=head1 BUGS

Please report any bugs or feature requests to the author.

=head1 AUTHOR

    Kathryn Andersen (RUBYKAT)
    perlkat AT katspace dot org

=head1 COPYRIGHT AND LICENCE

Copyright (c) 2009-2011 by Kathryn Andersen

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
=cut

use lib `fvwm-perllib dir`;

use FvwmLayout::Tiler;
use Getopt::Long 2.34;
use Pod::Usage;
use File::Basename;

#========================================================
# Subroutines

sub process_args ($) {
    my $opts = shift;

    my $ok = 1;

    # check the rc file if we can
    if (eval("require Getopt::ArgvFile")) {
	my $nameBuilder=sub
	{
	    my $bn = basename($_[0], '');
	    [".${bn}rc", ".${bn}/config", ".config/${bn}/config"];
	};
	Getopt::ArgvFile::argvFile(
				   startupFilename=>$nameBuilder,
				   home=>1,
				   current=>1);
    }

    pod2usage(2) unless @ARGV;

    my $op = new Getopt::Long::Parser;
    $op->configure(qw(auto_version auto_help));
    $op->getoptions($opts,
	       'verbose!',
	       'manpage',
	       'exclude=s',
	       'include=s',
	       'action=s',
	       'maximize!',
	       'rows=i',
	       'cols=i',
	       'maxwin=i',
	       'ratios=s',
	       'variant=s',
	       'options=s',
	      ) or pod2usage(2);

    if ($opts->{'manpage'})
    {
	pod2usage({ -message => "$0 version $VERSION",
		    -exitval => 0,
		    -verbose => 2,
	    });
    }

} # process_args

#========================================================
# Main

MAIN:
{
    my %data = ();
    process_args(\%data);

    my $tiler = FvwmLayout::Tiler->new(%data);

    $tiler->start();
}
